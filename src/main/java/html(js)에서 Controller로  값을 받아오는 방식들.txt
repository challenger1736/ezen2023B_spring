
1. 요청 매개변수(Parameter) = @RequestParam

    HTTP 요청에 매개변수를 전달하여 값을 받아올 수 있습니다.
    Spring에서는 @RequestParam 어노테이션을 사용하여 요청 매개변수를 처리할 수 있습니다.

    @GetMapping("/example")
    public String exampleMethod(@RequestParam("paramName") String paramValue) {
        // paramValue를 사용하여 작업 수행
        return "resultPage";
    }

- 부가 설명 :
@RequestParam을 통해 값을 받아오는 방식은 매우 간단합니다.
이 어노테이션을 사용하여 HTTP 요청의 쿼리 매개변수나 폼 데이터를 받아올 수 있습니다.

    예시 >
    @Controller
    public class MyController {

        @GetMapping("/example")
        public String exampleMethod(@RequestParam("paramName") String paramValue) {
            // paramName으로 전달된 값인 paramValue를 사용하여 작업 수행
            return "resultPage";
        }
    }

    위의 예제에서 /example 엔드포인트로 GET 요청이 오면, 요청의 쿼리 매개변수 중 paramName에 해당하는 값을 paramValue 변수에 받아옵니다.

    이제 HTML에서 GET 또는 POST 요청을 보내면서 paramName에 해당하는 값을 전달하면 됩니다.
    GET 요청의 경우 URL에 쿼리 매개변수(?id=값, 이런방식)를 포함하여 보내고,
    POST 요청의 경우 HTML 폼을 통해 데이터를 전송합니다.

        예를 들어,

        GET 요청의 경우

        http://example.com/example?paramName=value


        POST 요청의 경우 HTML 폼

        <form action="/example" method="post">
            <input type="text" name="paramName" value="value">
            <input type="submit" value="Submit">
        </form>

        위의 HTML 폼에서 name 속성이 paramName인 필드를 가지고 있고, 그 값이 value로 설정되어 있습니다.
        이 폼을 제출하면 /example 엔드포인트로 POST 요청이 전송되고, 컨트롤러의 exampleMethod에서는 paramValue 변수에 value 값을 받아옵니다.

---------------------------------------------------------------------------------------------------------------------

2. 경로 변수(Path Variable) = @PathVariable

    URL 경로에 있는 변수 값을 받아올 수 있습니다.
    Spring에서는 @PathVariable 어노테이션을 사용하여 경로 변수를 처리할 수 있습니다.

    @GetMapping("/example/{id}")
    public String exampleMethod(@PathVariable("id") Long id) {
        // id를 사용하여 작업 수행
        return "resultPage";
    }

- 부가 설명 :

        예시>
        클라이언트가 다음과 같은 URL로 GET 요청을 보낼 경우:

        http://example.com/example/123
        컨트롤러의 exampleMethod에서는 id 변수에 123이 전달되어 작업을 수행할 수 있습니다.

---------------------------------------------------------------------------------------------------------------------

3. HTML Form 데이터 = @ModelAttribute
// = DTO에 담아서 받아오는 방식과 같은 말, html의 폼의 인풋의 네임값과 DTO의 필드 속성이름을 같게 해줘야 자동으로 바인딩 됨(들어감)

    HTML 폼을 통해 전송된 데이터를 받아올 수 있습니다.
    Spring에서는 컨트롤러 메서드의 매개변수에 폼 데이터가 바인딩되도록 @ModelAttribute 어노테이션을 사용할 수 있습니다.

    @PostMapping("/submitForm")
    public String submitForm(@ModelAttribute FormObject formObject) {
        // formObject를 사용하여 작업 수행
        return "resultPage";
    }

---------------------------------------------------------------------------------------------------------------------

4. HTTP 요청 바디(POST 방식) = @RequestBody
// = JSON형식의 데이터로 js에서 자바로 받아오는 방식 이것도 제이슨이 보내는 키의 이름과 필드의 이름이 같아야함.

    HTML 폼이나 AJAX 요청을 통해 전송된 데이터를 받아올 수 있습니다.
    Spring에서는 @RequestBody 어노테이션을 사용하여 요청 본문의 데이터를 객체로 변환할 수 있습니다.

   @PostMapping("/submitData")
   public String submitData(@RequestBody MyDataObject dataObject) {
       // dataObject를 사용하여 작업 수행
       return "resultPage";
   }

---------------------------------------------------------------------------------------------------------------------

5. 세션 데이터(Session) = HttpSession 객체

세션이란? 세션은 보통 브라우저에 저장되는 쿠키(cookie)를 통해 관리됩니다. // 결국 브라우저에 저장되는 값이다.

    세션을 통해 사용자별 데이터를 받아올 수 있습니다.
    Spring에서는 HttpSession 객체를 컨트롤러 메서드의 매개변수로 선언하여 세션 데이터에 접근할 수 있습니다.

    @GetMapping("/example")
    public String exampleMethod(HttpSession session) {
      String value = (String) session.getAttribute("sessionAttribute");
      // value를 사용하여 작업 수행
      return "resultPage";
    }

예시> 2가지

1번째 예시 받아오기

컨트롤러에서 세션 데이터 받아오기 :

import javax.servlet.http.HttpSession; // 세션으로 받겠다
import org.springframework.stereotype.Controller; // 어노테이션
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MyController {

    @GetMapping("/getDataFromSession")
    public String getDataFromSession(HttpSession session) { // 세션으로 받겠다.
        String value = (String) session.getAttribute("myAttribute"); // 변수 value 에 세션에서 myAttribute라는 데이터를 (String)으로 저장하겠다.
        // 세션 데이터를 사용하여 작업 수행
        return "resultPage";
    }
}

위의 예제에서 /getDataFromSession 엔드포인트로 GET 요청이 오면,
해당 요청의 세션에서 "myAttribute"라는 이름의 데이터를 받아옵니다.
이 데이터는 문자열로 캐스팅되어 value 변수에 저장됩니다.
세션 데이터는 클라이언트의 브라우저와 관련되어 있으므로 클라이언트가 서버로부터 새로운 요청을 보낼 때까지 유지됩니다.

2번째 예시 세션에 저장하기 :

import javax.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MyController {

    @GetMapping("/setDataToSession")
    public String setDataToSession(HttpSession session) {
        session.setAttribute("myAttribute", "myValue");
        // 세션에 데이터 설정
        return "resultPage";
    }
}

위의 예제에서 /setDataToSession 엔드포인트로 GET 요청이 오면,
해당 요청의 세션에 "myAttribute"라는 이름의 데이터를 "myValue"로 설정합니다.
이렇게 설정된 데이터는 세션에 유지되어 다음 요청에서 사용할 수 있습니다.

---------------------------------------------------------------------------------------------------------------------

6. 서블릿 요청 객체(ServletRequest) = ServletRequest 객체

   Spring 컨트롤러 메서드의 매개변수로 ServletRequest 객체를 직접 선언하여 서블릿 요청을 처리할 수도 있습니다.

   @GetMapping("/example")
   public String exampleMethod(ServletRequest request) {
       String paramValue = request.getParameter("paramName");
       // paramValue를 사용하여 작업 수행
       return "resultPage";
   }

예시들>

1번째 // 결국 쿼리스트링 방식으로 받아온다는 소리

import javax.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MyController {

    @GetMapping("/getDataFromRequest")
    public String getDataFromRequest(HttpServletRequest request) { // 이렇게 쓰는 대신 @RequestParam("paramName") String paramValue 이런식으로 쓸 수도 있음.
        String paramValue = request.getParameter("paramName");
        // 요청의 파라미터 값을 받아와서 사용
        return "resultPage";
    }
}

import javax.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MyController {

    @GetMapping("/getRequestInfo")
    public String getRequestInfo(HttpServletRequest request) {
        String requestUrl = request.getRequestURL().toString();
        String requestMethod = request.getMethod();
        String userAgent = request.getHeader("User-Agent"); // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 이런식으로 내 정보를 가져와 줌.
        // 요청의 URL, 메서드, 사용자 에이전트 정보를 받아와서 사용
        return "resultPage";
    }
}

---------------------------------------------------------------------------------------------------------------------
